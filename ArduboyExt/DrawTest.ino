#include <SPI.h>
#include <EEPROM.h>
#include "Arduboy.h"
#include "ArduboyExt.h"

#define B2_BLACK 0
#define B2_GRAY 1
#define B2_WHITE 2
#define B2_BLANK 3

const unsigned char tile1 [] = {
0xFF, 0xC3, 0xA5, 0x99, 0x99, 0xA5, 0xC3, 0xFF
};

const uint8_t GirlDown0 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0x3F, 0xFF, 0x4F
, 0x3F, 0x40, 0x4F, 0x15
, 0x93, 0x65, 0x54, 0xA9
, 0x94, 0x09, 0x94, 0xA5
, 0x94, 0xA5, 0x94, 0x09
, 0x54, 0xA9, 0x93, 0x65
, 0x4F, 0x15, 0x3F, 0x40
, 0xFF, 0x4F, 0xFF, 0x3F
, 0xFF, 0xFF, 0xFC, 0xFF
, 0xC1, 0xFF, 0x28, 0xFD
, 0x45, 0xF4, 0x02, 0xC4
, 0x12, 0xC4, 0x21, 0xF4
, 0x21, 0xF4, 0x12, 0xC4
, 0x02, 0xC4, 0x45, 0xF4
, 0x28, 0xFD, 0xC1, 0xFF
, 0xFC, 0xFF, 0xFF, 0xFF
};

const uint8_t GirlDown1 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0xFF, 0xFF, 0x3F
, 0xFF, 0x00, 0x3F, 0x55
, 0x4F, 0x96, 0x53, 0xA5
, 0x53, 0x26, 0x53, 0x96
, 0x53, 0x96, 0x53, 0x26
, 0x53, 0xA5, 0x4F, 0x96
, 0x3F, 0x55, 0xFF, 0x00
, 0xFF, 0x3F, 0xFF, 0xFF
, 0xFC, 0xFF, 0xF1, 0xFF
, 0xC5, 0xFF, 0x00, 0xFF
, 0x15, 0xFD, 0x0A, 0xF4
, 0x48, 0xC4, 0x86, 0xC4
, 0x86, 0xF4, 0x08, 0xF4
, 0x8A, 0xF2, 0x85, 0xF2
, 0x20, 0xFC, 0x05, 0xFF
, 0xF1, 0xFF, 0xFC, 0xFF
};

const uint8_t GirlDown2 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0x3F, 0xFF, 0x4F
, 0x3F, 0x40, 0x4F, 0x15
, 0x93, 0x65, 0x54, 0xA9
, 0x94, 0x09, 0x94, 0xA5
, 0x94, 0xA5, 0x94, 0x09
, 0x54, 0xA9, 0x93, 0x65
, 0x4F, 0x15, 0x3F, 0x40
, 0xFF, 0x4F, 0xFF, 0x3F
, 0xFF, 0xFF, 0xFC, 0xFF
, 0xC1, 0xFF, 0x28, 0xFD
, 0x45, 0xF4, 0x02, 0xC4
, 0x12, 0xC4, 0x21, 0xF4
, 0x21, 0xF4, 0x12, 0xC4
, 0x02, 0xC4, 0x45, 0xF4
, 0x28, 0xFD, 0xC1, 0xFF
, 0xFC, 0xFF, 0xFF, 0xFF
};

const uint8_t GirlDown3 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0xFF, 0xFF, 0x3F
, 0xFF, 0x00, 0x3F, 0x55
, 0x4F, 0x96, 0x53, 0xA5
, 0x53, 0x26, 0x53, 0x96
, 0x53, 0x96, 0x53, 0x26
, 0x53, 0xA5, 0x4F, 0x96
, 0x3F, 0x55, 0xFF, 0x00
, 0xFF, 0x3F, 0xFF, 0xFF
, 0xFC, 0xFF, 0xF1, 0xFF
, 0x05, 0xFF, 0x20, 0xFC
, 0x85, 0xF2, 0x8A, 0xF2
, 0x08, 0xF4, 0x86, 0xF4
, 0x86, 0xC4, 0x48, 0xC4
, 0x0A, 0xF4, 0x15, 0xFD
, 0x00, 0xFF, 0xC5, 0xFF
, 0xF1, 0xFF, 0xFC, 0xFF
};

const uint8_t Tree [] PROGMEM = {
0x20, 0x20
, 0xFF, 0x7F, 0xFF, 0x07
, 0xFF, 0x50, 0x3F, 0x65
, 0x4F, 0xAA, 0x87, 0xAA
, 0x93, 0x5A, 0xA1, 0x56
, 0xA4, 0x55, 0x68, 0x95
, 0x98, 0xAA, 0x68, 0xA9
, 0x98, 0xA6, 0xA4, 0x9A
, 0xA4, 0x9A, 0xA4, 0x9A
, 0x98, 0xA6, 0x68, 0xA9
, 0xA4, 0xAA, 0xA4, 0xAA
, 0x94, 0xAA, 0x54, 0x69
, 0x64, 0x55, 0xA4, 0x55
, 0x91, 0x56, 0x93, 0xAA
, 0x47, 0xAA, 0x4F, 0xA5
, 0x3F, 0x55, 0xFF, 0x50
, 0xFF, 0x07, 0xFF, 0x7F
, 0x00, 0x00, 0x55, 0x55
, 0x55, 0x55, 0xA9, 0x55
, 0xAA, 0x5A, 0xAA, 0x56
, 0xA9, 0x56, 0xA5, 0x6A
, 0x55, 0xAA, 0x56, 0xA9
, 0x56, 0xA9, 0x55, 0xAA
, 0x55, 0xAA, 0x56, 0xA9
, 0x56, 0xA5, 0x56, 0xA5
, 0x5A, 0x95, 0x6A, 0x95
, 0x5A, 0xA5, 0x55, 0xA9
, 0x55, 0xAA, 0x55, 0xA9
, 0x55, 0xA9, 0x55, 0xAA
, 0xA9, 0x5A, 0xAA, 0x5A
, 0xAA, 0x5A, 0xA5, 0x56
, 0x55, 0x55, 0x55, 0x55
, 0x55, 0x55, 0x00, 0x00
, 0x54, 0x50, 0x01, 0x45
, 0x15, 0x40, 0x15, 0x00
, 0x55, 0x01, 0x55, 0x01
, 0x55, 0x00, 0x55, 0x05
, 0x55, 0x05, 0x55, 0x15
, 0x56, 0x15, 0x6A, 0x05
, 0xAA, 0x15, 0x6A, 0x55
, 0x6A, 0x55, 0x5A, 0x15
, 0x5A, 0x15, 0x6A, 0x55
, 0x6A, 0x55, 0xAA, 0x15
, 0x6A, 0x05, 0x56, 0x15
, 0x55, 0x15, 0x55, 0x05
, 0x55, 0x05, 0x55, 0x00
, 0x55, 0x01, 0x55, 0x01
, 0x15, 0x00, 0x15, 0x40
, 0x01, 0x45, 0x54, 0x50
, 0xF5, 0xFF, 0xD5, 0xFF
, 0x05, 0xF4, 0x51, 0xF1
, 0xA4, 0xF1, 0x69, 0xF1
, 0x6A, 0xD4, 0x59, 0xD4
, 0x15, 0xD4, 0x14, 0x55
, 0x04, 0x55, 0x14, 0x54
, 0x54, 0x51, 0x90, 0x45
, 0x90, 0x06, 0xA4, 0x16
, 0xA4, 0x16, 0x90, 0x06
, 0x90, 0x45, 0x54, 0x51
, 0x14, 0x54, 0x04, 0x55
, 0x14, 0x55, 0x14, 0xD4
, 0x59, 0xD4, 0x6A, 0xD4
, 0x69, 0xF1, 0xA4, 0xF1
, 0x51, 0xF1, 0x05, 0xF4
, 0xD5, 0xFF, 0xF5, 0xFF
};

const uint8_t LinkDown0 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0xFF, 0x3F, 0xC0
, 0x8F, 0x1A, 0x03, 0x90
, 0x14, 0x82, 0x88, 0x00
, 0x88, 0x80, 0x94, 0x80
, 0x94, 0x00, 0x53, 0x82
, 0x0F, 0x90, 0x8F, 0x1A
, 0x3F, 0xC0, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0x0F, 0xFF, 0xA3, 0xCC
, 0x14, 0x00, 0x01, 0x11
, 0x46, 0x22, 0x48, 0x22
, 0x4A, 0x06, 0x4A, 0x06
, 0x08, 0x04, 0x86, 0x02
, 0x81, 0x02, 0x54, 0xCC
, 0x03, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkDown1 [] PROGMEM = {
0x10, 0x10
, 0x3F, 0xC0, 0x8F, 0x1A
, 0x0F, 0x90, 0x53, 0x82
, 0x94, 0x00, 0x94, 0x80
, 0x88, 0x80, 0x88, 0x00
, 0x14, 0x82, 0x03, 0x90
, 0x8F, 0x1A, 0x3F, 0xC0
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0x03, 0xFF, 0x54, 0xCC
, 0x81, 0x02, 0x86, 0x02
, 0x08, 0x04, 0x4A, 0x06
, 0x4A, 0x06, 0x48, 0x22
, 0x46, 0x22, 0x01, 0x11
, 0x14, 0x00, 0xA3, 0xCC
, 0x0F, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkLeft0 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0xFC, 0x3F, 0x0C
, 0x0F, 0x8C, 0x63, 0xA0
, 0xA3, 0x01, 0x84, 0xA2
, 0x18, 0x86, 0x64, 0x00
, 0x64, 0xA4, 0x14, 0xAA
, 0x53, 0x00, 0x4F, 0x15
, 0x3F, 0xC5, 0xFF, 0xF0
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFC, 0x3F, 0x01, 0x00
, 0x46, 0x06, 0x06, 0x00
, 0x86, 0x22, 0x80, 0x22
, 0x06, 0x20, 0x51, 0x21
, 0x40, 0x01, 0x3F, 0x30
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkLeft1 [] PROGMEM = {
0x10, 0x10
, 0x0F, 0x3C, 0x3F, 0x30
, 0x8F, 0x81, 0x8F, 0x06
, 0x13, 0x8A, 0x63, 0x18
, 0x63, 0x01, 0x93, 0x91
, 0x93, 0xA8, 0x53, 0x01
, 0x4F, 0x55, 0x4F, 0x05
, 0x3F, 0xF0, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFC, 0xFF, 0xF2, 0x0F
, 0xC6, 0x23, 0x08, 0x20
, 0x8A, 0x22, 0x8A, 0x22
, 0x00, 0x04, 0x4A, 0x05
, 0x46, 0x01, 0x00, 0x20
, 0x3C, 0x2A, 0xFF, 0x00
, 0xFF, 0x3F, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkRight0 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0xF0, 0x3F, 0xC5
, 0x4F, 0x15, 0x53, 0x00
, 0x14, 0xAA, 0x64, 0xA4
, 0x64, 0x00, 0x18, 0x86
, 0x84, 0xA2, 0xA3, 0x01
, 0x63, 0xA0, 0x0F, 0x8C
, 0x3F, 0x0C, 0x3F, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0x3F, 0x30, 0x40, 0x01
, 0x51, 0x21, 0x06, 0x20
, 0x80, 0x22, 0x86, 0x22
, 0x06, 0x00, 0x46, 0x06
, 0x01, 0x00, 0xFC, 0x3F
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkRight1 [] PROGMEM = {
0x10, 0x10
, 0x3F, 0xF0, 0x4F, 0x05
, 0x4F, 0x55, 0x53, 0x01
, 0x93, 0xA8, 0x93, 0x91
, 0x63, 0x01, 0x63, 0x18
, 0x13, 0x8A, 0x8F, 0x06
, 0x8F, 0x81, 0x3F, 0x30
, 0x0F, 0x3C, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0x3F, 0xFF, 0x00
, 0x3C, 0x2A, 0x00, 0x20
, 0x46, 0x01, 0x4A, 0x05
, 0x00, 0x04, 0x8A, 0x22
, 0x8A, 0x22, 0x08, 0x20
, 0xC6, 0x23, 0xF2, 0x0F
, 0xFC, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkUp0 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0x00, 0x3F, 0x6A
, 0x3F, 0x00, 0x8F, 0x54
, 0x23, 0x55, 0x20, 0xAA
, 0x20, 0x5A, 0x20, 0x45
, 0x83, 0x14, 0x3F, 0x00
, 0x3F, 0x6A, 0xFF, 0x00
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0x03, 0xCF, 0x14, 0x00
, 0x40, 0x21, 0x94, 0x21
, 0x51, 0x06, 0x45, 0x06
, 0x15, 0x06, 0x15, 0x06
, 0x40, 0x06, 0x14, 0x01
, 0xA0, 0xC0, 0x0F, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t LinkUp1 [] PROGMEM = {
0x10, 0x10
, 0xFF, 0x00, 0x3F, 0x6A
, 0x3F, 0x00, 0x83, 0x14
, 0x20, 0x45, 0x20, 0x5A
, 0x20, 0xAA, 0x23, 0x55
, 0x8F, 0x54, 0x3F, 0x00
, 0x3F, 0x6A, 0xFF, 0x00
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0x0F, 0xFF, 0xA0, 0xC0
, 0x14, 0x01, 0x40, 0x06
, 0x15, 0x06, 0x15, 0x06
, 0x45, 0x06, 0x51, 0x06
, 0x94, 0x21, 0x40, 0x21
, 0x14, 0x00, 0x03, 0xCF
, 0xFF, 0xFF, 0xFF, 0xFF
, 0xFF, 0xFF, 0xFF, 0xFF
};


ArduboyExt display;

unsigned long lTime;
const byte FPS = 1000/68;

float tX = 0;
float tY = 0;
int dir = 0;
float image = 0;
float imagespd = 0.2;
float movespd = 0.8;
float off = 0;

const uint8_t *girl [] = { GirlDown0, GirlDown1, GirlDown2, GirlDown3 };

void drawCharacter(int x, int y, bool animate)
{
  if (animate)
      image += imagespd;

  if (image >= 2)
      image = 0;

  if (dir == 0)
  {
      if (floor(image) == 0)
         display.draw2Bitmap(x, y, LinkRight0);
      else
        display.draw2Bitmap(x, y, LinkRight1);
  }
  else if (dir == 90)
  {
      if (floor(image) == 0)
         display.draw2Bitmap(x, y, LinkUp0);
      else
         display.draw2Bitmap(x, y, LinkUp1);
  }
  else if (dir == 180)
  {
      if (floor(image) == 0)
         display.draw2Bitmap(x, y, LinkLeft0);
      else
         display.draw2Bitmap(x, y, LinkLeft1);
  }
  else if (dir == 270)
  {
      if (floor(image) == 0)
         display.draw2Bitmap(x, y, LinkDown0);
      else
         display.draw2Bitmap(x, y, LinkDown1);
  }
}

void setup() {
  // put your setup code here, to run once:
  display.start();

  lTime = millis();
  display.initRandomSeed();
}


void loop() {
  // put your main code here, to run repeatedly:
  if (millis() > lTime + FPS)
  {
    lTime = millis();
    
    bool moved = false;
    if (display.pressed(UP_BUTTON))
    {
      tY = max(tY - movespd, -15);
      moved = true;
      dir = 90;
    }
    if (display.pressed(DOWN_BUTTON))
    {
      tY = min(tY + movespd, 71);
      moved = true;
      dir = 270;
    }
    if (display.pressed(LEFT_BUTTON))
    {
      tX = max(tX - movespd, -15);
      moved = true;
      dir = 180;
    }
    if (display.pressed(RIGHT_BUTTON))
    {
      tX = min(tX + movespd, 133);
      moved = true;
      dir = 0;
    }

    display.cycleGray();
    display.clearDisplayWhite();

    /*for (int xx = 0; xx < 16; xx += 2)
    {
      display.drawBitmap(xx * 8,     0, tile1, 8, 8, 0);
      display.drawBitmap((xx+1) * 8, 8, tile1, 8, 8, 0);
      display.drawBitmap(xx * 8,     16, tile1, 8, 8, 0);
      display.drawBitmap((xx+1) * 8, 24, tile1, 8, 8, 0);
      display.drawBitmap(xx * 8,     32, tile1, 8, 8, 0);
      display.drawBitmap((xx+1) * 8, 40, tile1, 8, 8, 0);
      display.drawBitmap(xx * 8,     48, tile1, 8, 8, 0);
      display.drawBitmap((xx+1) * 8, 58, tile1, 8, 8, 0);
    }*/
    off += 0.04;
    if (off > 8)
      off = 0;

    uint8_t offU = (uint8_t)off;
    for (int a = 0; a < 16; a++)
    {
        for (int b = 0; b < 8; b++)
        {
          //display.drawBitmap(a * 8,     b * 8, tile1, 8, 8, 0);
          display.drawPixel((a * 8) + 2 + display.gray, (b * 8) + 2 + offU, 0);
          display.drawPixel((a * 8) + 6 - display.gray, (b * 8) + 4 + offU, 0);
          display.drawPixel((a * 8) + 6 + display.gray, (b * 8) + 4 - offU, 0);
          display.drawPixel((a * 8) + 2 - display.gray, (b * 8) + 2 - offU, 0);
        }
    }

    
    display.draw2Bitmap(0,16, Tree);
    display.draw2Bitmap(50,32,girl[(uint8_t)off/2]);
    drawCharacter(tX, tY, moved);
    
    
    display.display();
  }
}
